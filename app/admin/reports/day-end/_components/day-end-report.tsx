"use client"

import { useState } from 'react';
import * as XLSX from 'xlsx';
import { PDFDownloadLink } from '@react-pdf/renderer';

import { Button } from '@/components/ui/button';
import { fetchObbSheetDetails } from '@/actions/from-eliot/fetch-obb-sheet-details';
import SelectScanningPointAndDate from "@/components/forms/select-scanning-point-and-date";
import HourlyQuantityReportTemplate from '@/components/templates/report/hourly-quantity-report-template';
import HourlyQuantityReportViewer from '@/components/templates/report/viewer/hourly-quantity-report-viewer';
import { calculateDefectCounts as productCalculateDefectCounts } from '@/actions/qc/product/calculate-defect-counts';
import { calculateDefectCounts as gmtCalculateDefectCounts } from '@/actions/qc/gmt/calculate-defect-counts';
import { fetchGarmentDefectsWithOperations } from '@/actions/qc/gmt/fetch-garment-defects-with-operations';
import { calculateDhuAndAnalyzeDefects as gmtCalculationFunction } from '@/actions/qc/gmt/calculate-dhu-and-analyze-defects';
import { calculateDhuAndAnalyzeDefects as productCalculationFunction } from '@/actions/qc/product/calculate-dhu-and-analyze-defects';
import { fetchProductDefectsWithOperations } from '@/actions/qc/product/fetch-product-defects-with-operations';

interface DayEndReportProps {
    scanningPoints: {
        id: string;
        name: string;
        pointNo: number;
    }[] | null;
    userName: string;
}

type GmtQcReportDetailsType = {
    label: string;
    value: string;
};

type GmtQcHourlyQuantityType = {
    hourGroup: string;
    inspectQty: number;
    passQty: number;
    reworkQty: number;
    rejectQty: number;
    DHU: number;
    ACV: number;
};


const DayEndReport = ({
    scanningPoints,
    userName
}: DayEndReportProps) => {
    const [pdfLink, setPdfLink] = useState<JSX.Element | null>(null);
    const [excellSheetDetails, setExcellSheetDetails] = useState({ sheetName: "", fileName: "" });
    const [gmtDefectsCount, setGmtDefectsCount] = useState<StatusCountTypes>()
    const [gmtQcHourlyQuantity, setGmtQcHourlyQuantity] = useState<HourlyQuantityFunctionReturnTypes["hourlyQuantity"]>([]);
    const [gmtQcReportDetails, setGmtQcReportDetails] = useState<GmtQcReportDetailsType[]>([]);


    const handleGenerateReport = async (data: { obbSheetId: string; scanningPointId: string; pointNo: number; date: Date }) => {
        data.date.setDate(data.date.getDate() + 1);
        const formattedDate = data.date.toISOString().split('T')[0];

        const obbRes = await fetchObbSheetDetails(data.obbSheetId);
        
        if (obbRes) {
            if (data.pointNo === 5 || data.pointNo === 6) {
                await generateReportForGmtQc(data.scanningPointId, obbRes, formattedDate);

            }
            else if (data.pointNo === 8 || data.pointNo === 9) {
                await processPointNoNine(data.scanningPointId, obbRes, formattedDate);
            }
        }
    };

    const processPointNoNine = async (scanningPointId: string, obbSheet: ObbSheetDetailsType, date: string) => {
        const productDefects = await fetchProductDefectsWithOperations({ qcPointId: scanningPointId, date });
        const defectCounts = await productCalculateDefectCounts(productDefects);
        const { totalDHU, hourlyQuantity } = productCalculationFunction(productDefects);
        setGmtQcHourlyQuantity(hourlyQuantity);
        setGmtDefectsCount(defectCounts.totalStatusCounts);

        const reportDetails = [
            { label: "Factory Name", value: "Apparel Gallery LTD" },
            { label: "Scanning Point", value: scanningPoints?.find(p => p.id === scanningPointId)?.name || '' },
            { label: "Date", value: date },
            { label: "Generated By", value: userName },
            { label: "Style", value: obbSheet.style },
            { label: "Buyer", value: obbSheet.buyer },
            { label: "Color", value: obbSheet.color || "-" },
            { label: "Unit", value: obbSheet.unitName },
            { label: "Line", value: obbSheet.lineName },
            { label: "Total DHU", value: totalDHU.toFixed(2) },
        ];
        setGmtQcReportDetails(reportDetails);
        setExcellSheetDetails({ sheetName: "Hourly QC Report", fileName: "qc-report.xlsx" });

        const pdfElement = generatePdfReport(hourlyQuantity, reportDetails, defectCounts);
        setPdfLink(pdfElement);
    };

    const generateReportForGmtQc = async (scanningPointId: string, obbSheet: ObbSheetDetailsType, date: string) => {
        // const garmentDefects = await fetchGarmentDefectsWithOperations(scanningPointId, undefined, date);
        const garmentDefects = await fetchGarmentDefectsWithOperations({ qcPointId: scanningPointId, date });
        const defectCounts = await gmtCalculateDefectCounts(garmentDefects);
        const { totalDHU, hourlyQuantity } = gmtCalculationFunction(garmentDefects);
        setGmtQcHourlyQuantity(hourlyQuantity);
        setGmtDefectsCount(defectCounts.totalStatusCounts);

        const reportDetails = [
            { label: "Factory Name", value: "Apparel Gallery LTD" },
            { label: "Scanning Point", value: scanningPoints?.find(p => p.id === scanningPointId)?.name || '' },
            { label: "Date", value: date },
            { label: "Generated By", value: userName },
            { label: "Style", value: obbSheet.style },
            { label: "Buyer", value: obbSheet.buyer },
            { label: "Color", value: obbSheet.color || "-" },
            { label: "Unit", value: obbSheet.unitName },
            { label: "Line", value: obbSheet.lineName },
            { label: "Total DHU", value: totalDHU.toFixed(2) },
        ];
        setGmtQcReportDetails(reportDetails);
        setExcellSheetDetails({ sheetName: "Hourly QC Report", fileName: "qc-report.xlsx" });

        const pdfElement = generatePdfReport(hourlyQuantity, reportDetails, defectCounts);
        setPdfLink(pdfElement);
    }

    const generatePdfReport = (hourlyQuantity: any[], reportDetails: GmtQcReportDetailsType[], defectCounts: CalculateGmtDefectCountTypes) => {
        return (
            <PDFDownloadLink
                document={
                    <HourlyQuantityReportTemplate
                        details={reportDetails}
                        data={hourlyQuantity}
                        totalDefectCounts={defectCounts.totalStatusCounts}
                    />
                }
                fileName="qc-report.pdf"
            >
                {/* {({ loading }) => (loading ? "Generating PDF..." : "Download PDF Report")} */}
                Download PDF Report
            </PDFDownloadLink>
        );
    };

    const generateExcelSheet = () => {
        if (gmtQcHourlyQuantity.length > 0 && excellSheetDetails.fileName && excellSheetDetails.sheetName) {
            const worksheet = XLSX.utils.json_to_sheet(gmtQcHourlyQuantity);
            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, excellSheetDetails.sheetName.toString());
            XLSX.writeFile(workbook, excellSheetDetails.fileName.toString());
        }
    };

    return (
        <div className="mt-8 mx-auto max-w-7xl">
            <SelectScanningPointAndDate
                scanningPoints={scanningPoints}
                handleSubmit={handleGenerateReport}
            />
            {(gmtQcReportDetails.length > 0 && gmtQcHourlyQuantity.length > 0 && gmtDefectsCount) &&
                <div className='mt-8 p-8 bg-slate-100 rounded-lg border flex flex-col items-end gap-4'>
                    <div className='space-x-4'>
                        {(excellSheetDetails.fileName && excellSheetDetails.sheetName) &&
                            <Button variant="outline" onClick={generateExcelSheet}>
                                Download Excell
                            </Button>
                        }
                        {pdfLink && (
                            <Button variant="default">
                                {pdfLink}
                            </Button>
                        )}
                    </div>
                    <div className='w-full pdf-viewer'>
                        <HourlyQuantityReportViewer
                            details={gmtQcReportDetails}
                            data={gmtQcHourlyQuantity}
                            totalDefectCounts={gmtDefectsCount}
                        />
                    </div>
                </div>
            }
        </div>
    )
}

export default DayEndReport