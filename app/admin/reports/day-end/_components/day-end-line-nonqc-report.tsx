"use client"

import { useState } from 'react';
import { PDFDownloadLink } from '@react-pdf/renderer';
import { GmtData, Product, Rfid } from "@prisma/client";

import { Button } from '@/components/ui/button';
import SelectQcPointObbDateOptional from './common/select-qcpoint-obb-date-optional';
import DayEndLineNonQcBundleReportTemplate from '@/components/templates/report/day-end-line-nonqc-bundle-report-template';
import DayEndLineNonQcBundleReportViewer from '@/components/templates/report/viewer/day-end-line-nonqc-bundle-report-viewer';
import { processBundleDataByCuttingNo, processBundleDataHourly } from '../_actions/process-bundle-data';
import { fetchBundlesData } from '../_actions/fetch-bundles-data';
import { fetchAssembledProductsData } from '../_actions/fetch-assembled-products-data';

interface DayEndLineNonQcReportProps {
    scanningPoints: {
        id: string;
        name: string;
        pointNo: number;
    }[] | null;
    userName: string;
}

type ReportDetailsType = {
    label: string;
    value: string;
};

type HourlyReportType = {
    hourGroup: string;
    totalBundles: number;
    totalGarmentQty: number;
};

type CuttingReportType = {
    cuttingNo: number;
    buyerName: string;
    style: string;
    color: string;
    shade: string;
    InputBundlQty: number;
    InputGarmentQty: number;
};

type AssembledProductsDataProps = (Product & {
    frontGmt: GmtData;
    rfid: Rfid;
})[];

const DayEndLineNonQcReport = ({
    scanningPoints,
    userName
}: DayEndLineNonQcReportProps) => {
    const [isReportGenerated, setIsReportGenerated] = useState(false);
    const [pdfLink, setPdfLink] = useState<JSX.Element | null>(null);
    const [reportData, setReportData] = useState<any[]>([]);
    const [reportDataByHour, setReportDataByHour] = useState<HourlyReportType[]>([]);
    const [reportDataByCuttingNo, setReportDataByCuttingNo] = useState<CuttingReportType[]>([]);
    const [reportDetails, setReportDetails] = useState<ReportDetailsType[]>([]);

    const handleGenerateReport = async (data: { obbSheetId?: string; scanningPointId: string; pointNo: number; date: Date }) => {
        data.date.setDate(data.date.getDate() + 1);
        const formattedDate = data.date.toISOString().split('T')[0];

        if (data.pointNo === 1) {
            const bundles = await fetchBundlesData(formattedDate, 1);
            generateReportForPointOneAndTwo(bundles, formattedDate, data.scanningPointId);
        } else if (data.pointNo === 2) {
            const bundles = await fetchBundlesData(formattedDate, 2);
            generateReportForPointOneAndTwo(bundles, formattedDate, data.scanningPointId);
        } else if (data.pointNo === 7 && data.obbSheetId) {
            const products = await fetchAssembledProductsData(data.obbSheetId, formattedDate);
            setReportData(products);

            const reportDetails = [
                { label: "Factory Name", value: "Apparel Gallery LTD" },
                { label: "Scanning Point", value: scanningPoints?.find(p => p.id === data.scanningPointId)?.name || '' },
                { label: "Date", value: formattedDate },
                { label: "Generated By", value: userName },
            ];
            setReportDetails(reportDetails);

            const pdfElement = generatePdfReportForPointSeven(products, reportDetails);
            setPdfLink(pdfElement);
        }
    };

    const generateReportForPointOneAndTwo = (bundleData: FetchBundlesForDayEndReportReturnType[], date: string, scanningPointId: string) => {
        const categorizedBundleByHour = processBundleDataHourly(bundleData);
        const categorizedBundleByCuttingNo = processBundleDataByCuttingNo(bundleData);
        setReportDataByHour(categorizedBundleByHour);
        setReportDataByCuttingNo(categorizedBundleByCuttingNo);
        // console.log("1", categorizedBundleByHour);
        // console.log("2", categorizedBundleByCuttingNo);

        const reportDetails = [
            { label: "Factory Name", value: "Apparel Gallery LTD" },
            { label: "Scanning Point", value: scanningPoints?.find(p => p.id === scanningPointId)?.name || '' },
            { label: "Date", value: date },
            { label: "Generated By", value: userName },
        ];
        setReportDetails(reportDetails);

        const pdfElement = generatePdfReportForPointOneAndTwo(categorizedBundleByHour, categorizedBundleByCuttingNo, reportDetails);
        setPdfLink(pdfElement);
    }

    const generatePdfReportForPointOneAndTwo = (reportDataByHour: any[], reportDataByCuttingNo: any[], reportDetails: ReportDetailsType[]) => {
        setIsReportGenerated(true);
        return (
            <PDFDownloadLink
                document={
                    <DayEndLineNonQcBundleReportTemplate
                        details={reportDetails}
                        reportDataByHour={reportDataByHour}
                        reportDataByCuttingNo={reportDataByCuttingNo}
                    />
                }
                fileName="day-end-line-qc-report.pdf"
            >
                Download PDF Report
            </PDFDownloadLink>
        );
    };

    const generatePdfReportForPointSeven = (reportData: any[], reportDetails: ReportDetailsType[]) => {
        setIsReportGenerated(true);
        return (
            <PDFDownloadLink
                document={
                    <DayEndLineNonQcBundleReportTemplate
                        details={reportDetails}
                        reportDataByHour={reportDataByHour}
                        reportDataByCuttingNo={reportDataByCuttingNo}
                    />
                }
                fileName="day-end-line-qc-report.pdf"
            >
                Download PDF Report
            </PDFDownloadLink>
        );
    };

    return (
        <div className="mt-8 mx-auto max-w-7xl">
            <SelectQcPointObbDateOptional
                scanningPoints={scanningPoints}
                handleSubmit={handleGenerateReport}
            />
            {isReportGenerated &&
                <div className='mt-8 p-8 bg-slate-100 rounded-lg border flex flex-col items-end gap-4'>
                    <div className='space-x-4'>
                        {pdfLink && (
                            <Button variant="default">
                                {pdfLink}
                            </Button>
                        )}
                    </div>
                    <div className='w-full pdf-viewer'>
                        {(reportDataByHour.length > 0 && reportDataByCuttingNo.length > 0 && reportDetails.length > 0) &&
                            <DayEndLineNonQcBundleReportViewer
                                details={reportDetails}
                                reportDataByHour={reportDataByHour}
                                reportDataByCuttingNo={reportDataByCuttingNo}
                            />
                        }
                    </div>
                </div>
            }
        </div>
    )
}

export default DayEndLineNonQcReport