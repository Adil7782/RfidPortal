"use client"

import { useState } from 'react';
import { PDFDownloadLink } from '@react-pdf/renderer';

import { Button } from '@/components/ui/button';
import { fetchObbSheetDetails } from '@/actions/from-eliot/fetch-obb-sheet-details';
import { fetchGarmentDefectsWithOperations } from '@/actions/qc/gmt/fetch-garment-defects-with-operations';
import { fetchProductDefectsWithOperations } from '@/actions/qc/product/fetch-product-defects-with-operations';
import { calculateDhuAndAnalyzeDefects as gmtCalculationFunction } from '@/actions/qc/gmt/calculate-dhu-and-analyze-defects';
import { calculateDhuAndAnalyzeDefects as productCalculationFunction } from '@/actions/qc/product/calculate-dhu-and-analyze-defects';
import { processDefectTypesAndCounts } from '@/actions/qc/pocess-defect-types-and-counts';
import SelectObbSheetAndDate from '@/components/forms/select-obb-sheet-and-date';
import DayEndLineAllQcReportTemplate from '@/components/templates/report/day-end-line-allqc-report-template';
import DayEndLineAllQcReportViewer from '@/components/templates/report/viewer/day-end-line-allqc-report-viewer';

interface DayEndLineAllQcReportProps {
    userName: string;
}

type ReportDetailsType = {
    label: string;
    value: string;
};

const DayEndLineAllQcReport = ({
    userName
}: DayEndLineAllQcReportProps) => {
    const [pdfLink, setPdfLink] = useState<JSX.Element | null>(null);
    const [defectSummaryData, setDefectSummaryData] = useState<{ label: string; data: { name: string; count: number }[] }[]>([]);
    const [reportData, setReportData] = useState<{ label: string; data: HourlyQuantityFunctionReturnTypes }[]>([]);
    const [reportDetails, setReportDetails] = useState<ReportDetailsType[]>([]);


    const handleGenerateReport = async (data: { obbSheetId: string; date: Date }) => {
        data.date.setDate(data.date.getDate() + 1);
        const formattedDate = data.date.toISOString().split('T')[0];

        const obbSheet = await fetchObbSheetDetails(data.obbSheetId);

        const garmentFrontDefects = await fetchGarmentDefectsWithOperations({ part: "front", date: formattedDate });
        const frontResults = gmtCalculationFunction(garmentFrontDefects);
        const frontDefectsSummary = processDefectTypesAndCounts(garmentFrontDefects);

        const garmentBackDefects = await fetchGarmentDefectsWithOperations({ part: "back", date: formattedDate });
        const backResults = gmtCalculationFunction(garmentBackDefects);
        const backDefectsSummary = processDefectTypesAndCounts(garmentBackDefects);

        const productAssemblyDefects = await fetchProductDefectsWithOperations({ part: "assembly", date: formattedDate });
        const assemblyResults = productCalculationFunction(productAssemblyDefects);
        const assemblDefectsSummary = processDefectTypesAndCounts(productAssemblyDefects);

        const productLineEndDefects = await fetchProductDefectsWithOperations({ part: "line-end", date: formattedDate });
        const lineEndResults = productCalculationFunction(productLineEndDefects);
        const lineEndDefectsSummary = processDefectTypesAndCounts(productLineEndDefects);

        const defectsSummaryData: { label: string; data: { name: string; count: number }[] }[] = [
            { label: "Front QC", data: frontDefectsSummary },
            { label: "Back QC", data: backDefectsSummary },
            { label: "Assembly QC", data: assemblDefectsSummary },
            { label: "End QC", data: lineEndDefectsSummary }
        ]

        const formattedData: { label: string; data: HourlyQuantityFunctionReturnTypes }[] = [
            { label: "Front QC", data: frontResults },
            { label: "Back QC", data: backResults },
            { label: "Assembly QC", data: assemblyResults },
            { label: "End QC", data: lineEndResults },
        ];

        const reportDetails = [
            { label: "Date", value: formattedDate },
            { label: "Generated By", value: userName },
            { label: "Style", value: obbSheet?.style ?? "-" },
            { label: "Buyer", value: obbSheet?.buyer ?? "-" },
            { label: "Color", value: obbSheet?.color ?? "-" },
            { label: "Unit", value: obbSheet?.unitName ?? "-" },
            { label: "Line", value: obbSheet?.lineName ?? "-" },
            // { label: "Total DHU", value: formattedData.map(value => value.data.totalDHU).reduce((accumulator, currentValue) => accumulator + currentValue, 0).toFixed(2).toString() },
        ];

        setReportData(formattedData);
        setReportDetails(reportDetails);
        setDefectSummaryData(defectsSummaryData);

        const pdfElement = generatePdfReport(formattedData, reportDetails, defectsSummaryData);
        setPdfLink(pdfElement);
    };

    const generatePdfReport = (reportData: any[], reportDetails: ReportDetailsType[], defectsSummary: any[]) => {
        return (

            <PDFDownloadLink
                document={
                    <DayEndLineAllQcReportTemplate
                        details={reportDetails}
                        data={reportData}
                        defectsSummary= {defectsSummary}
                    />
                }
                fileName="day-end-line-qc-report.pdf"
            >
                {/* {({ loading }) => (loading ? "Generating PDF..." : "Download PDF Report")} */}
                Download PDF Report
            </PDFDownloadLink>
        );
    };

    return (
        <div className="mt-8 mx-auto max-w-7xl">
            <SelectObbSheetAndDate
                handleSubmit={handleGenerateReport}
            />
            {(reportData.length > 0 && reportDetails.length > 0) &&
                <div className='mt-8 p-8 bg-slate-100 rounded-lg border flex flex-col items-end gap-4'>
                    <div className='space-x-4'>
                        {pdfLink && (
                            <Button variant="default">
                                {pdfLink}
                            </Button>
                        )}
                    </div>
                    <div className='w-full pdf-viewer'>
                        <DayEndLineAllQcReportViewer
                            details={reportDetails}
                            data={reportData}
                            defectsSummary= {defectSummaryData}
                        />
                    </div>
                </div>
            }
        </div>
    )
}

export default DayEndLineAllQcReport