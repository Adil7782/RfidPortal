generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ScanningPoint {
  id             String          @id
  name           String          @unique
  section        String
  route          String          @unique
  createdAt      DateTime        @default(now())
  pointNo        Int             @unique
  dailyTarget    Int?
  workingHours   Int?
  isThisQcPoint  Boolean         @default(false)
  defects        Defect[]
  gmtDefects     GmtDefect[]
  products       Product[]
  productDefects ProductDefect[]
  users          User[]
}

model ProductionLine {
  id        String   @id
  name      String   @unique
  unit      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User[]
}

model User {
  id              String          @id
  name            String
  role            String
  employeeId      String          @unique
  email           String          @unique
  phone           String?
  password        String
  unit            String?
  scanningPointId String?
  lineId          String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  bundleData      BundleData[]
  line            ProductionLine? @relation(fields: [lineId], references: [id])
  scanningPoint   ScanningPoint?  @relation(fields: [scanningPointId], references: [id], onDelete: Cascade)

  @@index([scanningPointId, lineId])
}

model BundleData {
  id                String    @id
  bundleBarcode     Int       @unique
  bundleNo          Int
  color             String
  quantity          Int
  startPly          Int
  endPly            Int
  cuttingNo         Int
  cuttingDate       String
  size              String
  buyerName         String
  userEmail         String
  createdAt         DateTime  @default(now())
  patternNo         String?
  timestampStoreIn  String
  timestampStoreOut String?
  poCode            String[]  @default([])
  unitName          String?
  user              User      @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  gmtData           GmtData[]

  @@index([userEmail])
}

model GmtData {
  id                  String      @id
  gmtBarcode          String      @unique
  color               String
  shade               String
  size                String
  styleNo             String
  buyerName           String
  partName            String
  serialNumber        Int
  isAssembled         Boolean     @default(false)
  bundleId            String
  createdAt           DateTime    @default(now())
  timestampProduction String?
  unitName            String?
  lineId              String?
  lineName            String?
  po                  String?
  obbSheetId          String?
  bundle              BundleData  @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  defects             GmtDefect[]
  backProduct         Product?    @relation("backGmt")
  frontProduct        Product?    @relation("frontGmt")

  @@index([bundleId])
}

model Rfid {
  id        String   @id @default(uuid())
  rfid      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  product   Product?
}

model Product {
  id                    String          @id @default(uuid())
  rfidId                String          @unique
  frontGmtId            String          @unique
  backGmtId             String          @unique
  createdAt             DateTime        @default(now())
  currentPointNo        Int?            @default(7)
  timestampAssembled    String
  timestampButtonOut    String?
  timestampButtonQc     String?
  timestampDryQc        String?
  timestampFinishIn     String?
  timestampFinishLineIn String?
  timestampFinishLineQc String?
  timestampFinishOut    String?
  timestampPackIn       String?
  timestampWashIn       String?
  timestampWashOut      String?
  timestampWetQc        String?
  timestampAssembleQc   String?
  obbSheetId            String
  timestampEndQc        String?
  backGmt               GmtData         @relation("backGmt", fields: [backGmtId], references: [id], onDelete: Cascade)
  scanningPoint         ScanningPoint?  @relation(fields: [currentPointNo], references: [pointNo])
  frontGmt              GmtData         @relation("frontGmt", fields: [frontGmtId], references: [id], onDelete: Cascade)
  rfid                  Rfid            @relation(fields: [rfidId], references: [id], onDelete: Cascade)
  defects               ProductDefect[]

  @@index([currentPointNo, rfidId, frontGmtId, backGmtId])
}

model Defect {
  id             String          @id
  name           String
  createdAt      DateTime        @default(now())
  qcPointNo      Int
  qcPoint        ScanningPoint   @relation(fields: [qcPointNo], references: [pointNo], onDelete: Cascade)
  gmtDefects     GmtDefect[]     @relation("GmtQC")
  productDefects ProductDefect[] @relation("ProductQC")

  @@index([qcPointNo])
}

model ProductDefect {
  id             String        @id
  timestamp      String
  productId      String
  createdAt      DateTime      @default(now())
  qcStatus       String        @default("pass")
  qcPointId      String
  obbOperationId String?
  operatorId     String?
  operatorName   String?
  obbSheetId     String?
  part           String        @default("line-end")
  product        Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  qcPoint        ScanningPoint @relation(fields: [qcPointId], references: [id], onDelete: Cascade)
  defects        Defect[]      @relation("ProductQC")

  @@index([productId, qcPointId])
}

model GmtDefect {
  id             String        @id
  timestamp      String
  gmtId          String
  createdAt      DateTime      @default(now())
  qcStatus       String        @default("pass")
  qcPointId      String
  obbOperationId String?
  operatorId     String?
  operatorName   String?
  part           String
  obbSheetId     String?
  gmtData        GmtData       @relation(fields: [gmtId], references: [id], onDelete: Cascade)
  qcPoint        ScanningPoint @relation(fields: [qcPointId], references: [id], onDelete: Cascade)
  defects        Defect[]      @relation("GmtQC")

  @@index([gmtId, qcPointId])
}

model LineEfficiencyResources {
  id                      String   @id @default(uuid())
  unitName                String
  obbSheetId              String   
  style                   String
  lineName                String?
  date                    String
  // frontQcTarget           Int?
  // backQcTarget            Int?
  endQcTarget             Int?
  obbManPowers            Int?
  utilizedManPowers       Int?
  totalSMV                Float?
  workingHours            Float?
  targetEfficiency        Float?
  dailyPlanEfficiency     Float?
  obbHelpers              Int?
  obbIronOperators        Int?
  obbSewingOperators      Int?
  targetWorkingHours      Int?
  utilizedHelpers         Int?
  utilizedIronOperators   Int?
  utilizedMachines        Int?
  utilizedSewingOperators Int?
  // assemblyQcTarget        Int?
  // buttonQcTarget          Int?
  // dryQcTarget             Int?
  // finishingLineQcTarget   Int?
  // wetQcTarget             Int?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
}

model ObbQcTarget {
  id                 String   @id @default(uuid())
  obbSheetId         String   @unique
  name               String
  version            String
  style              String
  buyer              String
  unitName           String
  lineName           String
  color              String?
  totalSMV           String?
  workingHours       String?
  frontQcTarget      Int?
  backQcTarget       Int?
  assemblyQcTarget   Int?
  endQcTarget        Int?
  buttonQcTarget     Int?
  dryQcTarget        Int?
  wetQcTarget        Int?
  finishLineQcTarget Int?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}
